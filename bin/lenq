#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var program = require('commander');
var youdao = require('youdao');
var superagent = require('superagent');
var cheerio = require('cheerio');
var colors = require('colors');
var webpack = require('webpack');
var glob = require('glob');
var openurl = require('openurl');
var fetch = require('node-fetch');
var exec = require('child_process').exec;

var gs = require('../lib/generateStructure');
var gt = require('../es6_template');
var webpackDevConfig = require('./webpack.dev.config');
var webpackProdConfig = require('./webpack.prod.config');
var webpackServeConfig = require('./webpack.server.config');
var global_config = require('./config');
var run = require('./devServer');

var plan = require('./plan');
var convert = require('./convert');

// var execCmd = process.platform === 'win32' ? 'start' : 'open';

program
  .version(require('../package.json').version);

/**
 * about commander.js doc
 * http://tj.github.io/commander.js/
 */

// program
//   .command('hi')
//   .description('initialize project configuration')
//   .action(function(){
// 		console.log('Hi my Friend!!!');
// });

// program
//   .command('bye [name]')
//   .description('initialize project configuration')
//   .action(function(name){
// 		console.log('Bye ' + name + '. It was good to see you!');
// });
// 
// 

colors.setTheme({
  info: 'green',
  error: 'yellow',
  danger: 'red'
});


program
  .command('*')
  .action(function(env) {
    console.log('您输入的命令不存在!'.error);
  });

// 计划
program
  .command('plan [method] [content]')
  .alias('p')
  .description('管理您的日常计划')
  .action(function(method, content) {
      plan(method, content);
  });

program
  .command('convert [html file path]')
  .alias('cvt')
  .description('转换html为js模板文件')
  .action(function(name) {
      convert(name);
  });

program
  .command('total [npmPackage] [startDate] [endDate]')
  .alias('t')
  .description('查询npm项目的总下载量')
  .action(function (name, sd, ed) {
    var now = new Date();
    var month = now.getMonth() >= 10 ? now.getMonth() + 1 : '0'+ (now.getMonth() + 1);
    var tomorrow = `${now.getFullYear()}-${month}-${now.getDate() - 1}`;
    var today = `${now.getFullYear()}-${month}-${now.getDate()}`;
    var api = `https://api.npmjs.org/downloads/range/${sd || tomorrow}:${ed || today}/${name}`;
    
    fetch(api)
      .then(res => res.json())
      .then(({ downloads }) => downloads.reduce((total, day) => total + day.downloads, 0))
      .then(total => {
        let reg = /(?=(?!\b)(\d{3})+$)/g;
        total = `${total}`.replace(reg, ',');
        console.log(`${total}`.info);
      })
  })

program
  .command('filter [repo] [keyword] [extension]')
  .alias('f')
  .description('过滤code在github的仓库上')
  .action(function (repo, keyword, extension) {
    var splitRE = /[, |]/;
    var extensionArr = [];

    if (extension && splitRE.test(extension)) {
      extensionArr = extension.split(splitRE);
      extension = extensionArr.map(extensionName => `extension:${extensionName}`).join(' ');
    } else {
      extension = `extension:${extension || 'js'}`;
    }

    var kw = `repo:${repo} ${extension} ${keyword}`;
    var searchUrl = `https://github.com/search?utf8=✓&q=${kw}+&type=Code`;
    // var gistSearch = `https://gist.github.com/search?utf8=✓&q=user:${username}+${keyword}&ref=searchresults`

    openurl.open(searchUrl);
    
    // exec(`${execCmd} ${searchUrl}`);
  })

// search
program
  .command('search [keyword]')
  .alias('s')
  .description('通过搜索引擎搜索内容 [baidu、google], 默认使用baidu搜索引擎')
  .action(function(keyword, enginName) {
    keyword = typeof keyword === 'object' ? '' : keyword;
    var searchUrl = `https://www.baidu.com/s?wd=${keyword}`;
    if(!!enginName) {
      switch(enginName) {
        case 'baidu':
          searchUrl = `https://www.${enginName}.com/s?wd=${keyword}`;
          break;
        case 'google':
          searchUrl = `https://www.${enginName}.com.hk/?q=${keyword}#safe=strict&q=${keyword}`;
          break;
      }  
    }

    // exec
    // exec(`${execCmd} ${searchUrl}`);
    openurl.open(searchUrl);
  });

program
  .command('create [directory]')
  .alias('c')
  .description('创建gulp + webpack工程项目')
  .action(function(name){
    gs(name);
    console.log(`恭喜，${name}目录已生成！`.info);
    // terminate(true);
});

// 执行系统命令
// exec('start http://example.com'); 打开网页

// news
program
  .command('news [keyword]')
  .alias('n')
  .description('获取最新的it新闻')
  .action(function(name) {
    var originUrl = 'http://toutiao.io/'
    var newsUrl = '';

    if(name) {
      newsUrl = 'http://toutiao.io/search?utf8=%E2%9C%93&q=' + name;
    } else {
      newsUrl = originUrl
    }

    superagent.get(newsUrl)
      .end(function(err, sres) {
        if(err) {
          console.log('获取内容失败');
        }

        var $ = cheerio.load(sres.text);
        var items = [];

        $('.posts .post').each(function(idx, element) {
          var $element = $(element);
          var $title = $element.find('.title');

          items.push({
            title: $title.text(),
            href: originUrl + '' + ($title.find('a').attr('href')).slice(1)
          });
        });


        for(var item of items) {
          if(name) {
            if(name && item.title.toLowerCase().search(name.toLowerCase()) !== -1) {
              console.log(`${(item.title).info.dim} (${(item.href).error})`);
            }
            else {
              // console.log(`sorry, 找不到和${name}相关的新闻`);
            }
          }
          else {
            console.log(`${(item.title).info.dim} (${(item.href).error})`);
          }
        }

      });
  });

// 翻译
program
  .command('fy [content]')
  .description('输入你要翻译的内容')
  .action(function(name) {
    youdao.set({
      keyfrom: 'cnblog',
      key: '1356067187'
    });

    youdao.translate(name, function(e, result) {
      console.log('翻译的结果为： \n\n'+ result);
    });
});

program
  .command('serve [name]')
  .description('启动webpack-dev-server服务')
  .action(function(name) {
      run(global_config.port, webpackServeConfig(name));
  });

// compile es6 to es5
program
  .command('compile [name]')
  .description('将ES6代码编译为ES5代码')
  .action(function(name) {

    buildWebpack(name, 'dev');

    // buildDevWebpack(name, _dir);

    // fs.access(__dirname + _dir, fs.F_OK, function(err) {
    //     if(!err) {
    //          console.log('Connot access this directory or exist this directory please clean the directory'.danger);
    //     }

        

    // });

  });

program
  .command('build [name]')
  .description('将ES6代码编译并打包为ES5代码')
  .action(function(name) {

    buildWebpack(name, 'prod');
    
    // fs.access(__dirname + _dir, fs.F_OK, function(err) {
    //     if(err) {
    //          console.log('Connot access this directory or exist this directory please clean the directory'.danger);
    //     }

        

    // });

  });

// program
//   .command('copy [name]')
//   .description('复制')
//   .action(name => {
//     gt(name);
//   })

program.parse(process.argv);


function buildWebpack(name, flag) {
  var webpackCfg;
  
  glob('{./package.json,./.babelrc}', {}, (err, matches) => {
    if (err) return console.log(`出问题了${err}`);

    if(matches.length === 2) {
      handleCallback()
    }

    if(matches.length < 2) {
      gt().then(err => {
        if(err) return console.log('创建package.json文件时出错'.danger);
        console.log('已为您创建package.json、.babelrc文件'.info);
        console.log();
        console.log('现在为您安装依赖包，请稍等...');
        console.log();
        exec('npm install', (err, stdout, stderr) => {
          if(err) {
            console.log(`exec error: ${err}`.danger);
          }

          handleCallback()
        });
      });
    }
  });

  // fs.stat('./package.json', (err, stats) => {
  //   if (err) {
  //     // console.log(`您当前目前没有package.json文件!`.danger);
  //     gt().then(err => {
  //       if(err) return console.log('创建package.json文件时出错'.danger);
  //       console.log('已为您创建package.json、.babelrc文件'.info);
  //       console.log();
  //       console.log('现在为您安装依赖包，请稍等...');
  //       exec('npm install', (err, stdout, stderr) => {
  //         if(err) {
  //           console.log(`exec error: ${err}`.danger);
  //         }

  //         handleCallback()
  //       });
  //     });
  //   }
    
  // });



  function handleCallback() {
    if(flag === 'dev') {
      webpackCfg = webpackDevConfig(name);
    } else {
      webpackCfg = webpackProdConfig(name);
    }

    handleCompile(webpackCfg);
  }

  
}

// function buildProdWebpack(name) {
//   var webpackCfg = webpackProdConfig(name);
//   handleCompile(webpackCfg);
// }

// function buildDevWebpack(name) {
//   var webpackCfg = webpackDevConfig(name);
//   handleCompile(webpackCfg);
// }


function handleCompile(webpackCfg) {
  webpack(webpackCfg, function(err, stats) {
    if (err || stats.hasErrors() || stats.hasWarnings()) {
      console.log(stats.toString({
        chunks: false, // Makes the build much quieter
          colors: true
      }));
      process.exit(1);
    } else {
      console.log(`Nice, build success!`.info);
      process.exit(0);
    }

  });
}

// 原生写法

// var fs = require('fs'),
// 	path = process.cwd();

// var run = function(obj) {
// 	if(obj[0] === '-v') {
// 		console.log('version is 0.0.1');
// 	}
// 	else if(obj[0] === '-h') {
// 		console.log('Usage:');
// 		console.log('	-v --version [show version]');
// 	}
// 	else {
// 		fs.readdir(path, function(err, files) {
// 			if(err) {
// 				return console.log(err);
// 			}
// 			else {
// 				for(var i = 0; i < files.length; i++) {
// 					console.log(files[i]);
// 				}
// 			}
// 		});
// 	}
// };


// run(process.argv.slice(2));